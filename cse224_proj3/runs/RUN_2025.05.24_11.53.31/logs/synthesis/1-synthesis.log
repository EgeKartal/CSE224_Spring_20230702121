
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/ZeroToFive/src/ztfc_util.v
Parsing SystemVerilog input from `/openlane/designs/ZeroToFive/src/ztfc_util.v' to AST representation.
Storing AST representation for module `$abstract\ztfc_util'.
Storing AST representation for module `$abstract\ss'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/ZeroToFive/src/ztfc.v
Parsing SystemVerilog input from `/openlane/designs/ZeroToFive/src/ztfc.v' to AST representation.
Storing AST representation for module `$abstract\ztfc'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

5. Executing AST frontend in derive mode using pre-parsed AST for module `\ztfc'.
Generating RTLIL representation for module `\ztfc'.

5.1. Analyzing design hierarchy..
Top module:  \ztfc

5.2. Executing AST frontend in derive mode using pre-parsed AST for module `\ss'.
Generating RTLIL representation for module `\ss'.

5.3. Executing AST frontend in derive mode using pre-parsed AST for module `\ztfc_util'.
Generating RTLIL representation for module `\ztfc_util'.

5.4. Analyzing design hierarchy..
Top module:  \ztfc
Used module:     \ss
Used module:     \ztfc_util

5.5. Analyzing design hierarchy..
Top module:  \ztfc
Used module:     \ss
Used module:     \ztfc_util
Removing unused module `$abstract\ztfc'.
Removing unused module `$abstract\ss'.
Removing unused module `$abstract\ztfc_util'.
Removed 3 unused modules.

6. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/ZeroToFive/runs/RUN_2025.05.24_11.53.31/tmp/synthesis/hierarchy.dot'.
Dumping module ztfc to page 1.
Renaming module ztfc to ztfc.

7. Executing TRIBUF pass.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \ztfc
Used module:     \ss
Used module:     \ztfc_util

8.2. Analyzing design hierarchy..
Top module:  \ztfc
Used module:     \ss
Used module:     \ztfc_util
Removed 0 unused modules.

9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:39$1 in module ss.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:21$8 in module ztfc_util.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:7$2 in module ztfc_util.
Removed a total of 0 dead cases.

11. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

12. Executing PROC_INIT pass (extract init attributes).

13. Executing PROC_ARST pass (detect async resets in processes).

14. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~6 debug messages>

15. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ss.$proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:39$1'.
     1/1: $1\out[6:0]
Creating decoders for process `\ztfc_util.$proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:21$8'.
     1/1: $0\count[3:0]
Creating decoders for process `\ztfc_util.$proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:7$2'.
     1/1: $0\one_second_counter[26:0]

16. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ss.\out' from process `\ss.$proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:39$1'.

17. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ztfc_util.\count' using process `\ztfc_util.$proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:21$8'.
  created $dff cell `$procdff$33' with positive edge clock.
Creating register for signal `\ztfc_util.\one_second_counter' using process `\ztfc_util.$proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:7$2'.
  created $dff cell `$procdff$34' with positive edge clock.

18. Executing PROC_MEMWR pass (convert process memory writes to cells).

19. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ss.$proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:39$1'.
Removing empty process `ss.$proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:39$1'.
Found and cleaned up 3 empty switches in `\ztfc_util.$proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:21$8'.
Removing empty process `ztfc_util.$proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:21$8'.
Found and cleaned up 2 empty switches in `\ztfc_util.$proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:7$2'.
Removing empty process `ztfc_util.$proc$/openlane/designs/ZeroToFive/src/ztfc_util.v:7$2'.
Cleaned up 6 empty switches.

20. Executing CHECK pass (checking for obvious problems).
Checking module ztfc...
Checking module ss...
Checking module ztfc_util...
Found and reported 0 problems.

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.
Optimizing module ss.
<suppressed ~1 debug messages>
Optimizing module ztfc_util.
<suppressed ~3 debug messages>

22. Executing FLATTEN pass (flatten design).
Deleting now unused module ss.
Deleting now unused module ztfc_util.
<suppressed ~2 debug messages>

23. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ztfc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ztfc.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

25.9. Finished OPT passes. (There is nothing left to do.)

26. Executing FSM pass (extract and optimize FSM).

26.1. Executing FSM_DETECT pass (finding FSMs in design).

26.2. Executing FSM_EXTRACT pass (extracting FSM from design).

26.3. Executing FSM_OPT pass (simple optimizations of FSMs).

26.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..

26.5. Executing FSM_OPT pass (simple optimizations of FSMs).

26.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

26.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

26.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ztfc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ztfc.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\a.$procdff$34 ($dff) from module ztfc (D = $flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:14$5_Y [26:0], Q = \a.one_second_counter, rval = 27'000000000000000000000000000).
Adding SRST signal on $flatten\a.$procdff$33 ($dff) from module ztfc (D = $flatten\a.$procmux$22_Y, Q = \a.count, rval = 4'0000).
Adding EN signal on $auto$ff.cc:266:slice$38 ($sdff) from module ztfc (D = $flatten\a.$procmux$22_Y, Q = \a.count).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.
<suppressed ~1 debug messages>

27.9. Rerunning OPT passes. (Maybe there is more to do..)

27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ztfc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ztfc.
Performed a total of 0 changes.

27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

27.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..

27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

27.16. Finished OPT passes. (There is nothing left to do.)

28. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell ztfc.$flatten\a.$eq$/openlane/designs/ZeroToFive/src/ztfc_util.v:26$12 ($eq).
Removed top 31 bits (of 32) from port B of cell ztfc.$flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:25$11 ($add).
Removed top 28 bits (of 32) from port Y of cell ztfc.$flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:25$11 ($add).
Removed top 31 bits (of 32) from mux cell ztfc.$flatten\a.$ternary$/openlane/designs/ZeroToFive/src/ztfc_util.v:19$7 ($mux).
Removed top 31 bits (of 32) from port B of cell ztfc.$flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:14$5 ($add).
Removed top 5 bits (of 32) from port Y of cell ztfc.$flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:14$5 ($add).
Removed top 5 bits (of 32) from port B of cell ztfc.$flatten\a.$ge$/openlane/designs/ZeroToFive/src/ztfc_util.v:11$4 ($ge).
Removed top 3 bits (of 4) from port B of cell ztfc.$flatten\b.$procmux$17_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ztfc.$flatten\b.$procmux$16_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ztfc.$flatten\b.$procmux$15_CMP0 ($eq).
Removed top 5 bits (of 32) from wire ztfc.$flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:14$5_Y.
Removed top 28 bits (of 32) from wire ztfc.$flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:25$11_Y.

29. Executing PEEPOPT pass (run peephole optimizers).

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

31. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ztfc:
  creating $macc model for $flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:14$5 ($add).
  creating $macc model for $flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:25$11 ($add).
  creating $alu model for $macc $flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:25$11.
  creating $alu model for $macc $flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:14$5.
  creating $alu model for $flatten\a.$ge$/openlane/designs/ZeroToFive/src/ztfc_util.v:11$4 ($ge): new $alu
  creating $alu model for $flatten\a.$eq$/openlane/designs/ZeroToFive/src/ztfc_util.v:19$6 ($eq): merged with $flatten\a.$ge$/openlane/designs/ZeroToFive/src/ztfc_util.v:11$4.
  creating $alu cell for $flatten\a.$ge$/openlane/designs/ZeroToFive/src/ztfc_util.v:11$4, $flatten\a.$eq$/openlane/designs/ZeroToFive/src/ztfc_util.v:19$6: $auto$alumacc.cc:485:replace_alu$45
  creating $alu cell for $flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:14$5: $auto$alumacc.cc:485:replace_alu$58
  creating $alu cell for $flatten\a.$add$/openlane/designs/ZeroToFive/src/ztfc_util.v:25$11: $auto$alumacc.cc:485:replace_alu$61
  created 3 $alu and 0 $macc cells.

32. Executing SHARE pass (SAT-based resource sharing).

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ztfc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ztfc.
    New input vector for $reduce_or cell $auto$opt_dff.cc:254:combine_resets$37: { $auto$rtlil.cc:2479:ReduceAnd$51 $auto$rtlil.cc:2476:Not$55 \rst }
  Optimizing cells in module \ztfc.
Performed a total of 1 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ztfc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ztfc.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing MEMORY pass.

34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..

34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..

34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.
<suppressed ~2 debug messages>

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

36.3. Executing OPT_DFF pass (perform DFF optimizations).

36.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

36.5. Finished fast OPT passes.

37. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ztfc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ztfc.
    Consolidated identical input bits for $pmux cell $flatten\b.$procmux$14:
      Old ports: A=7'1111111, B=28'1000000111100101001000110000, Y=\seg_out
      New ports: A=6'111111, B=24'100000111001010100011000, Y={ \seg_out [6:4] \seg_out [2:0] }
      New connections: \seg_out [3] = \seg_out [0]
  Optimizing cells in module \ztfc.
Performed a total of 1 changes.

38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

38.6. Executing OPT_SHARE pass.

38.7. Executing OPT_DFF pass (perform DFF optimizations).

38.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..

38.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

38.10. Rerunning OPT passes. (Maybe there is more to do..)

38.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ztfc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

38.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ztfc.
Performed a total of 0 changes.

38.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

38.14. Executing OPT_SHARE pass.

38.15. Executing OPT_DFF pass (perform DFF optimizations).

38.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..

38.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

38.18. Finished OPT passes. (There is nothing left to do.)

39. Executing TECHMAP pass (map to technology primitives).

39.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

39.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$f02bbbf710bba6238f4bdfa41b3051acfe2064a8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod$956e79e8f8c5e64be7438155ae50a966e615cb04\_90_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$f3115659d5e2977ebd2cb01ff3557fc5f6187689\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
No more expansions possible.
<suppressed ~671 debug messages>

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.
<suppressed ~376 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
<suppressed ~210 debug messages>
Removed a total of 70 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..
Removed 64 unused cells and 291 unused wires.
<suppressed ~65 debug messages>

40.5. Finished fast OPT passes.

41. Executing ABC pass (technology mapping using ABC).

41.1. Extracting gate netlist of module `\ztfc' to `<abc-temp-dir>/input.blif'..
Extracted 156 gates and 190 wires to a netlist network with 32 inputs and 39 outputs.

41.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

41.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        2
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:               NOR cells:       15
ABC RESULTS:                OR cells:       23
ABC RESULTS:               AND cells:       13
ABC RESULTS:              NAND cells:       15
ABC RESULTS:            ANDNOT cells:       29
ABC RESULTS:               XOR cells:       23
ABC RESULTS:        internal signals:      119
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       39
Removing temp directory.

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..
Removed 0 unused cells and 126 unused wires.
<suppressed ~2 debug messages>

42.5. Finished fast OPT passes.

43. Executing HIERARCHY pass (managing design hierarchy).

43.1. Analyzing design hierarchy..
Top module:  \ztfc

43.2. Analyzing design hierarchy..
Top module:  \ztfc
Removed 0 unused modules.

44. Printing statistics.

=== ztfc ===

   Number of wires:                114
   Number of wire bits:            213
   Number of public wires:          12
   Number of public wire bits:      59
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                164
     $_ANDNOT_                      29
     $_AND_                         13
     $_NAND_                        15
     $_NOR_                         13
     $_NOT_                          2
     $_ORNOT_                       10
     $_OR_                          23
     $_SDFFE_PP0P_                   4
     $_SDFF_PP0_                    27
     $_XNOR_                         5
     $_XOR_                         23

45. Executing CHECK pass (checking for obvious problems).
Checking module ztfc...
Found and reported 0 problems.

46. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/ZeroToFive/runs/RUN_2025.05.24_11.53.31/tmp/synthesis/post_techmap.dot'.
Dumping module ztfc to page 1.

47. Executing SHARE pass (SAT-based resource sharing).

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

48.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ztfc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

48.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ztfc.
Performed a total of 0 changes.

48.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ztfc'.
Removed a total of 0 cells.

48.6. Executing OPT_DFF pass (perform DFF optimizations).

48.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..

48.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ztfc.

48.9. Finished OPT passes. (There is nothing left to do.)

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..
Removed 0 unused cells and 6 unused wires.
<suppressed ~6 debug messages>

50. Printing statistics.

=== ztfc ===

   Number of wires:                108
   Number of wire bits:            195
   Number of public wires:           6
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                164
     $_ANDNOT_                      29
     $_AND_                         13
     $_NAND_                        15
     $_NOR_                         13
     $_NOT_                          2
     $_ORNOT_                       10
     $_OR_                          23
     $_SDFFE_PP0P_                   4
     $_SDFF_PP0_                    27
     $_XNOR_                         5
     $_XOR_                         23

mapping tbuf

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing TECHMAP pass (map to technology primitives).

53.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

53.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

54. Executing SIMPLEMAP pass (map simple cells to gate primitives).

55. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

55.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\ztfc':
  mapped 31 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

56. Printing statistics.

=== ztfc ===

   Number of wires:                143
   Number of wire bits:            230
   Number of public wires:           6
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                199
     $_ANDNOT_                      29
     $_AND_                         13
     $_MUX_                         35
     $_NAND_                        15
     $_NOR_                         13
     $_NOT_                          2
     $_ORNOT_                       10
     $_OR_                          23
     $_XNOR_                         5
     $_XOR_                         23
     sky130_fd_sc_hd__dfxtp_2       31

[INFO]: USING STRATEGY AREA 0

57. Executing ABC pass (technology mapping using ABC).

57.1. Extracting gate netlist of module `\ztfc' to `/tmp/yosys-abc-hbcT4D/input.blif'..
Extracted 168 gates and 201 wires to a netlist network with 32 inputs and 37 outputs.

57.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-hbcT4D/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-hbcT4D/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-hbcT4D/input.blif 
ABC: + read_lib -w /openlane/designs/ZeroToFive/runs/RUN_2025.05.24_11.53.31/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/ZeroToFive/runs/RUN_2025.05.24_11.53.31/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/ZeroToFive/runs/RUN_2025.05.24_11.53.31/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/ZeroToFive/runs/RUN_2025.05.24_11.53.31/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (2321.33 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    128 ( 18.8 %)   Cap = 13.2 ff (  4.2 %)   Area =      974.68 ( 81.2 %)   Delay =  2671.69 ps  ( 20.3 %)               
ABC: Path  0 --      20 : 0    5 pi                        A =   0.00  Df =  51.1  -28.7 ps  S =  76.9 ps  Cin =  0.0 ff  Cout =  15.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      90 : 3    7 sky130_fd_sc_hd__and3_2   A =   7.51  Df = 290.1  -27.6 ps  S = 111.2 ps  Cin =  1.5 ff  Cout =  17.7 ff  Cmax = 309.5 ff  G = 1149  
ABC: Path  2 --      92 : 4    6 sky130_fd_sc_hd__and4_2   A =  10.01  Df = 579.1  -49.7 ps  S = 117.0 ps  Cin =  1.5 ff  Cout =  16.5 ff  Cmax = 300.3 ff  G = 1033  
ABC: Path  3 --      93 : 2    5 sky130_fd_sc_hd__and2_2   A =   7.51  Df = 782.5  -22.8 ps  S = 100.1 ps  Cin =  1.5 ff  Cout =  16.3 ff  Cmax = 303.0 ff  G = 1059  
ABC: Path  4 --     113 : 4    1 sky130_fd_sc_hd__o31a_2   A =  10.01  Df =1032.4 -129.3 ps  S =  45.4 ps  Cin =  2.3 ff  Cout =   1.5 ff  Cmax = 285.7 ff  G =   60  
ABC: Path  5 --     114 : 2    1 sky130_fd_sc_hd__or2_2    A =   6.26  Df =1309.0 -308.7 ps  S =  61.2 ps  Cin =  1.5 ff  Cout =   5.1 ff  Cmax = 299.4 ff  G =  328  
ABC: Path  6 --     115 : 5    9 sky130_fd_sc_hd__a221oi_2 A =  15.01  Df =1674.3 -596.1 ps  S = 368.4 ps  Cin =  4.5 ff  Cout =  14.9 ff  Cmax =  96.1 ff  G =  323  
ABC: Path  7 --     135 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =2092.7 -764.9 ps  S = 459.9 ps  Cin =  2.1 ff  Cout =  39.1 ff  Cmax = 130.0 ff  G = 1800  
ABC: Path  8 --     189 : 3    1 sky130_fd_sc_hd__nor3b_2  A =  12.51  Df =2671.7 -474.5 ps  S = 576.5 ps  Cin =  3.4 ff  Cout =  33.4 ff  Cmax =  93.4 ff  G =  988  
ABC: Start-point = pi19 (\a.one_second_counter [0]).  End-point = po33 ($auto$rtlil.cc:2684:MuxGate$1287).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   32/   37  lat =    0  nd =   128  edge =    321  area =974.79  delay =11.00  lev = 11
ABC: + write_blif /tmp/yosys-abc-hbcT4D/output.blif 

57.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        3
ABC RESULTS:        internal signals:      132
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       37
Removing temp directory.

58. Executing SETUNDEF pass (replace undef values with defined constants).

59. Executing HILOMAP pass (mapping to constant drivers).

60. Executing SPLITNETS pass (splitting up multi-bit signals).

61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ztfc..
Removed 0 unused cells and 228 unused wires.
<suppressed ~1 debug messages>

62. Executing INSBUF pass (insert buffer cells for connected wires).
Add ztfc/$auto$insbuf.cc:97:execute$1425: \seg_out [3] -> \seg_out [0]

63. Executing CHECK pass (checking for obvious problems).
Checking module ztfc...
Found and reported 0 problems.

64. Printing statistics.

=== ztfc ===

   Number of wires:                157
   Number of wire bits:            163
   Number of public wires:          35
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                161
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21boi_2       3
     sky130_fd_sc_hd__a21o_2         6
     sky130_fd_sc_hd__a21oi_2        7
     sky130_fd_sc_hd__a221oi_2       1
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__and2_2        11
     sky130_fd_sc_hd__and2b_2        2
     sky130_fd_sc_hd__and3_2        11
     sky130_fd_sc_hd__and3b_2        5
     sky130_fd_sc_hd__and4_2         7
     sky130_fd_sc_hd__and4b_2        2
     sky130_fd_sc_hd__and4bb_2       2
     sky130_fd_sc_hd__buf_1         19
     sky130_fd_sc_hd__buf_2          1
     sky130_fd_sc_hd__conb_1         1
     sky130_fd_sc_hd__dfxtp_2       31
     sky130_fd_sc_hd__inv_2          5
     sky130_fd_sc_hd__nand2_2        2
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nor2_2        11
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__nor3b_2        1
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o21a_2         3
     sky130_fd_sc_hd__o21ai_2       14
     sky130_fd_sc_hd__o221a_2        1
     sky130_fd_sc_hd__o31a_2         1
     sky130_fd_sc_hd__or2_2          8
     sky130_fd_sc_hd__or4_2          1

   Chip area for module '\ztfc': 1642.825600

65. Executing Verilog backend.
Dumping module `\ztfc'.

66. Executing JSON backend.

End of script. Logfile hash: ea67cf463b, CPU: user 0.63s system 0.12s, MEM: 42.57 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 43% 2x abc (0 sec), 17% 2x read_liberty (0 sec), ...
