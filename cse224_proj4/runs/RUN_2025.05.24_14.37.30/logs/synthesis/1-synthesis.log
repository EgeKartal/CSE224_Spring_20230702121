
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/sys/src/sys.v
Parsing SystemVerilog input from `/openlane/designs/sys/src/sys.v' to AST representation.
Storing AST representation for module `$abstract\sys'.
Storing AST representation for module `$abstract\RegisterFile'.
Storing AST representation for module `$abstract\ALU'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\sys'.
Generating RTLIL representation for module `\sys'.

4.1. Analyzing design hierarchy..
Top module:  \sys

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU'.
Generating RTLIL representation for module `\ALU'.

4.3. Executing AST frontend in derive mode using pre-parsed AST for module `\RegisterFile'.
Generating RTLIL representation for module `\RegisterFile'.

4.4. Analyzing design hierarchy..
Top module:  \sys
Used module:     \ALU
Used module:     \RegisterFile

4.5. Analyzing design hierarchy..
Top module:  \sys
Used module:     \ALU
Used module:     \RegisterFile
Removing unused module `$abstract\ALU'.
Removing unused module `$abstract\RegisterFile'.
Removing unused module `$abstract\sys'.
Removed 3 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/sys/runs/RUN_2025.05.24_14.37.30/tmp/synthesis/hierarchy.dot'.
Dumping module sys to page 1.
Renaming module sys to sys.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \sys
Used module:     \ALU
Used module:     \RegisterFile

7.2. Analyzing design hierarchy..
Top module:  \sys
Used module:     \ALU
Used module:     \RegisterFile
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sys/src/sys.v:43$1 in module ALU.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sys/src/sys.v:24$7 in module RegisterFile.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 3 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ALU.$proc$/openlane/designs/sys/src/sys.v:43$1'.
     1/1: $0\o[31:0]
Creating decoders for process `\RegisterFile.$proc$/openlane/designs/sys/src/sys.v:24$7'.
     1/5: $1$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$13
     2/5: $1$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_DATA[31:0]$12
     3/5: $1$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_ADDR[4:0]$11
     4/5: $0\RD2[31:0]
     5/5: $0\RD1[31:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ALU.\o' using process `\ALU.$proc$/openlane/designs/sys/src/sys.v:43$1'.
  created $dff cell `$procdff$36' with positive edge clock.
Creating register for signal `\RegisterFile.\RD1' using process `\RegisterFile.$proc$/openlane/designs/sys/src/sys.v:24$7'.
  created $dff cell `$procdff$37' with positive edge clock.
Creating register for signal `\RegisterFile.\RD2' using process `\RegisterFile.$proc$/openlane/designs/sys/src/sys.v:24$7'.
  created $dff cell `$procdff$38' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_ADDR' using process `\RegisterFile.$proc$/openlane/designs/sys/src/sys.v:24$7'.
  created $dff cell `$procdff$39' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_DATA' using process `\RegisterFile.$proc$/openlane/designs/sys/src/sys.v:24$7'.
  created $dff cell `$procdff$40' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN' using process `\RegisterFile.$proc$/openlane/designs/sys/src/sys.v:24$7'.
  created $dff cell `$procdff$41' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ALU.$proc$/openlane/designs/sys/src/sys.v:43$1'.
Removing empty process `ALU.$proc$/openlane/designs/sys/src/sys.v:43$1'.
Found and cleaned up 1 empty switch in `\RegisterFile.$proc$/openlane/designs/sys/src/sys.v:24$7'.
Removing empty process `RegisterFile.$proc$/openlane/designs/sys/src/sys.v:24$7'.
Cleaned up 2 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module sys...
Checking module ALU...
Checking module RegisterFile...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.
Optimizing module ALU.
<suppressed ~1 debug messages>
Optimizing module RegisterFile.

21. Executing FLATTEN pass (flatten design).
Deleting now unused module ALU.
Deleting now unused module RegisterFile.
<suppressed ~2 debug messages>

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..
Removed 3 unused cells and 17 unused wires.
<suppressed ~4 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sys..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sys.
    Consolidated identical input bits for $mux cell $flatten\rf.$procmux$22:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10
      New ports: A=1'0, B=1'1, Y=$flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0]
      New connections: $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [31:1] = { $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] $flatten\rf.$0$memwr$\RAM$/openlane/designs/sys/src/sys.v:26$6_EN[31:0]$10 [0] }
  Optimizing cells in module \sys.
Performed a total of 1 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sys..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sys.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sys..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sys.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\rf.$procdff$38 ($dff) from module sys (D = $flatten\rf.$memrd$\RAM$/openlane/designs/sys/src/sys.v:30$15_DATA, Q = \rf.RD2).
Adding EN signal on $flatten\rf.$procdff$37 ($dff) from module sys (D = $flatten\rf.$memrd$\RAM$/openlane/designs/sys/src/sys.v:29$14_DATA, Q = \rf.RD1).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sys..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sys.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell sys.$flatten\alu.$procmux$19_CMP0 ($eq).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module sys:
  creating $macc model for $flatten\alu.$add$/openlane/designs/sys/src/sys.v:45$2 ($add).
  creating $macc model for $flatten\alu.$sub$/openlane/designs/sys/src/sys.v:46$3 ($sub).
  creating $alu model for $macc $flatten\alu.$sub$/openlane/designs/sys/src/sys.v:46$3.
  creating $alu model for $macc $flatten\alu.$add$/openlane/designs/sys/src/sys.v:45$2.
  creating $alu cell for $flatten\alu.$add$/openlane/designs/sys/src/sys.v:45$2: $auto$alumacc.cc:485:replace_alu$45
  creating $alu cell for $flatten\alu.$sub$/openlane/designs/sys/src/sys.v:46$3: $auto$alumacc.cc:485:replace_alu$48
  created 2 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module sys that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\alu.$shr$/openlane/designs/sys/src/sys.v:48$5 ($shr):
    Found 1 activation_patterns using ctrl signal $flatten\alu.$procmux$17_CMP.
    No candidates found.
  Analyzing resource sharing options for $flatten\alu.$shl$/openlane/designs/sys/src/sys.v:47$4 ($shl):
    Found 1 activation_patterns using ctrl signal $flatten\alu.$procmux$18_CMP.
    No candidates found.

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sys..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sys.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing sys.rf.RAM write port 0.

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\rf.RAM'[0] in module `\sys': merging output FF to cell.
    Write port 0: don't care on collision.
Checking read port `\rf.RAM'[1] in module `\sys': merging output FF to cell.
    Write port 0: don't care on collision.

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..
Removed 2 unused cells and 66 unused wires.
<suppressed ~3 debug messages>

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory sys.rf.RAM by address:

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.
<suppressed ~4 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..
Removed 1 unused cells and 5 unused wires.
<suppressed ~2 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \rf.RAM in module \sys:
  created 32 $dff cells and 0 static cells of width 32.
Extracted data FF from read port 0 of sys.rf.RAM: $\rf.RAM$rdreg[0]
Extracted data FF from read port 1 of sys.rf.RAM: $\rf.RAM$rdreg[1]
  read interface: 2 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.
<suppressed ~14 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sys..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sys.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $flatten\alu.$procmux$16 in front of them:
        $auto$alumacc.cc:485:replace_alu$48
        $auto$alumacc.cc:485:replace_alu$45

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..
Removed 5 unused cells and 114 unused wires.
<suppressed ~6 debug messages>

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

37.10. Rerunning OPT passes. (Maybe there is more to do..)

37.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sys..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

37.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sys.
    New ctrl vector for $pmux cell $flatten\alu.$procmux$16: { $flatten\alu.$procmux$18_CMP $flatten\alu.$procmux$17_CMP }
  Optimizing cells in module \sys.
Performed a total of 1 changes.

37.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

37.14. Executing OPT_SHARE pass.

37.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\rf.RAM[9]$139 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[9]).
Adding EN signal on $memory\rf.RAM[8]$137 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[8]).
Adding EN signal on $memory\rf.RAM[7]$135 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[7]).
Adding EN signal on $memory\rf.RAM[6]$133 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[6]).
Adding EN signal on $memory\rf.RAM[5]$131 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[5]).
Adding EN signal on $memory\rf.RAM[4]$129 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[4]).
Adding EN signal on $memory\rf.RAM[3]$127 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[3]).
Adding EN signal on $memory\rf.RAM[31]$183 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[31]).
Adding EN signal on $memory\rf.RAM[30]$181 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[30]).
Adding EN signal on $memory\rf.RAM[2]$125 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[2]).
Adding EN signal on $memory\rf.RAM[29]$179 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[29]).
Adding EN signal on $memory\rf.RAM[28]$177 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[28]).
Adding EN signal on $memory\rf.RAM[27]$175 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[27]).
Adding EN signal on $memory\rf.RAM[26]$173 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[26]).
Adding EN signal on $memory\rf.RAM[25]$171 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[25]).
Adding EN signal on $memory\rf.RAM[24]$169 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[24]).
Adding EN signal on $memory\rf.RAM[23]$167 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[23]).
Adding EN signal on $memory\rf.RAM[22]$165 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[22]).
Adding EN signal on $memory\rf.RAM[21]$163 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[21]).
Adding EN signal on $memory\rf.RAM[20]$161 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[20]).
Adding EN signal on $memory\rf.RAM[1]$123 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[1]).
Adding EN signal on $memory\rf.RAM[19]$159 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[19]).
Adding EN signal on $memory\rf.RAM[18]$157 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[18]).
Adding EN signal on $memory\rf.RAM[17]$155 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[17]).
Adding EN signal on $memory\rf.RAM[16]$153 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[16]).
Adding EN signal on $memory\rf.RAM[15]$151 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[15]).
Adding EN signal on $memory\rf.RAM[14]$149 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[14]).
Adding EN signal on $memory\rf.RAM[13]$147 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[13]).
Adding EN signal on $memory\rf.RAM[12]$145 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[12]).
Adding EN signal on $memory\rf.RAM[11]$143 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[11]).
Adding EN signal on $memory\rf.RAM[10]$141 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[10]).
Adding EN signal on $memory\rf.RAM[0]$121 ($dff) from module sys (D = \inpmain, Q = \rf.RAM[0]).

37.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..
Removed 32 unused cells and 32 unused wires.
<suppressed ~33 debug messages>

37.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

37.18. Rerunning OPT passes. (Maybe there is more to do..)

37.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sys..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

37.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sys.
Performed a total of 0 changes.

37.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

37.22. Executing OPT_SHARE pass.

37.23. Executing OPT_DFF pass (perform DFF optimizations).

37.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..

37.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

37.26. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$dce7c1188cb25d2520d170426d59301c3b73f9e7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~1667 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.
<suppressed ~258 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
<suppressed ~180 debug messages>
Removed a total of 60 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..
Removed 21 unused cells and 286 unused wires.
<suppressed ~22 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\sys' to `<abc-temp-dir>/input.blif'..
Extracted 3045 gates and 4152 wires to a netlist network with 1106 inputs and 128 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:               NOR cells:       36
ABC RESULTS:               XOR cells:       87
ABC RESULTS:               MUX cells:     2305
ABC RESULTS:               NOT cells:       68
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:              NAND cells:       16
ABC RESULTS:                OR cells:      321
ABC RESULTS:            ANDNOT cells:      172
ABC RESULTS:        internal signals:     2918
ABC RESULTS:           input signals:     1106
ABC RESULTS:          output signals:      128
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.
<suppressed ~1089 debug messages>

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..
Removed 9 unused cells and 1512 unused wires.
<suppressed ~10 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \sys

42.2. Analyzing design hierarchy..
Top module:  \sys
Removed 0 unused modules.

43. Printing statistics.

=== sys ===

   Number of wires:               2980
   Number of wire bits:           4401
   Number of public wires:          55
   Number of public wire bits:    1383
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4138
     $_ANDNOT_                     172
     $_AND_                          2
     $_DFFE_PN_                     64
     $_DFFE_PP_                   1024
     $_DFF_P_                       32
     $_MUX_                       2305
     $_NAND_                        16
     $_NOR_                         36
     $_NOT_                         59
     $_ORNOT_                       13
     $_OR_                         321
     $_XNOR_                         7
     $_XOR_                         87

44. Executing CHECK pass (checking for obvious problems).
Checking module sys...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/sys/runs/RUN_2025.05.24_14.37.30/tmp/synthesis/post_techmap.dot'.
Dumping module sys to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sys..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sys.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sys'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sys.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..
Removed 0 unused cells and 13 unused wires.
<suppressed ~13 debug messages>

49. Printing statistics.

=== sys ===

   Number of wires:               2967
   Number of wire bits:           4189
   Number of public wires:          42
   Number of public wire bits:    1171
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4138
     $_ANDNOT_                     172
     $_AND_                          2
     $_DFFE_PN_                     64
     $_DFFE_PP_                   1024
     $_DFF_P_                       32
     $_MUX_                       2305
     $_NAND_                        16
     $_NOR_                         36
     $_NOT_                         59
     $_ORNOT_                       13
     $_OR_                         321
     $_XNOR_                         7
     $_XOR_                         87

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\sys':
  mapped 1120 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

55. Printing statistics.

=== sys ===

   Number of wires:               4055
   Number of wire bits:           5277
   Number of public wires:          42
   Number of public wire bits:    1171
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5226
     $_ANDNOT_                     172
     $_AND_                          2
     $_MUX_                       3393
     $_NAND_                        16
     $_NOR_                         36
     $_NOT_                         59
     $_ORNOT_                       13
     $_OR_                         321
     $_XNOR_                         7
     $_XOR_                         87
     sky130_fd_sc_hd__dfxtp_2     1120

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\sys' to `/tmp/yosys-abc-xS0zFV/input.blif'..
Extracted 4106 gates and 5244 wires to a netlist network with 1138 inputs and 1120 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-xS0zFV/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-xS0zFV/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-xS0zFV/input.blif 
ABC: + read_lib -w /openlane/designs/sys/runs/RUN_2025.05.24_14.37.30/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/sys/runs/RUN_2025.05.24_14.37.30/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.10 sec
ABC: Memory =    9.54 MB. Time =     0.10 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/sys/runs/RUN_2025.05.24_14.37.30/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/sys/runs/RUN_2025.05.24_14.37.30/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (4761.25 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   5123 ( 31.1 %)   Cap = 11.3 ff ( 10.6 %)   Area =    45848.97 ( 63.2 %)   Delay =  4969.19 ps  (  0.6 %)               
ABC: Path  0 --    1036 : 0   10 pi                         A =   0.00  Df =  95.7  -51.7 ps  S = 140.8 ps  Cin =  0.0 ff  Cout =  29.7 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    2280 : 4    1 sky130_fd_sc_hd__or4_2     A =   8.76  Df = 692.1 -460.9 ps  S =  94.5 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 310.4 ff  G =  140  
ABC: Path  2 --    2281 : 1   10 sky130_fd_sc_hd__buf_1     A =   3.75  Df = 906.1 -380.9 ps  S = 363.1 ps  Cin =  2.1 ff  Cout =  30.6 ff  Cmax = 130.0 ff  G = 1370  
ABC: Path  3 --    2655 : 3    8 sky130_fd_sc_hd__or3_2     A =   7.51  Df =1466.9 -684.8 ps  S = 130.6 ps  Cin =  1.5 ff  Cout =  22.4 ff  Cmax = 310.4 ff  G = 1384  
ABC: Path  4 --    2735 : 3    4 sky130_fd_sc_hd__or3_2     A =   7.51  Df =1943.8-1000.2 ps  S = 106.5 ps  Cin =  1.5 ff  Cout =  12.3 ff  Cmax = 310.4 ff  G =  760  
ABC: Path  5 --    2745 : 3    1 sky130_fd_sc_hd__o21a_2    A =   8.76  Df =2173.7-1049.8 ps  S =  63.1 ps  Cin =  2.4 ff  Cout =   8.4 ff  Cmax = 294.8 ff  G =  346  
ABC: Path  6 --    2746 : 2    2 sky130_fd_sc_hd__xnor2_2   A =  16.27  Df =2338.5-1068.1 ps  S = 176.0 ps  Cin =  8.5 ff  Cout =   9.4 ff  Cmax = 121.8 ff  G =  104  
ABC: Path  7 --    2747 : 2    2 sky130_fd_sc_hd__nor2_2    A =   6.26  Df =2387.5-1028.4 ps  S =  78.2 ps  Cin =  4.4 ff  Cout =   4.3 ff  Cmax = 141.9 ff  G =   92  
ABC: Path  8 --    2749 : 2    4 sky130_fd_sc_hd__or2b_2    A =   8.76  Df =2682.6 -110.3 ps  S =  62.3 ps  Cin =  1.6 ff  Cout =   6.4 ff  Cmax = 312.2 ff  G =  389  
ABC: Path  9 --    2796 : 4    2 sky130_fd_sc_hd__or4_2     A =   8.76  Df =3334.9 -625.9 ps  S = 108.1 ps  Cin =  1.5 ff  Cout =   5.1 ff  Cmax = 310.4 ff  G =  316  
ABC: Path 10 --    2858 : 4    2 sky130_fd_sc_hd__a211o_2   A =  10.01  Df =3672.3 -861.3 ps  S =  59.5 ps  Cin =  2.4 ff  Cout =   6.9 ff  Cmax = 325.0 ff  G =  285  
ABC: Path 11 --    2907 : 4    2 sky130_fd_sc_hd__a31o_2    A =   8.76  Df =3885.0 -819.5 ps  S =  59.2 ps  Cin =  2.4 ff  Cout =   6.8 ff  Cmax = 271.9 ff  G =  279  
ABC: Path 12 --    2917 : 4    3 sky130_fd_sc_hd__a31o_2    A =   8.76  Df =4100.5 -867.7 ps  S =  73.2 ps  Cin =  2.4 ff  Cout =   9.5 ff  Cmax = 271.9 ff  G =  387  
ABC: Path 13 --    2945 : 4    2 sky130_fd_sc_hd__a31o_2    A =   8.76  Df =4361.0 -934.9 ps  S =  91.6 ps  Cin =  2.4 ff  Cout =  13.1 ff  Cmax = 271.9 ff  G =  535  
ABC: Path 14 --    2954 : 4    1 sky130_fd_sc_hd__o2bb2ai_2 A =  15.01  Df =4517.4-1017.6 ps  S = 153.8 ps  Cin =  4.6 ff  Cout =   9.0 ff  Cmax = 134.6 ff  G =  187  
ABC: Path 15 --    2958 : 2    1 sky130_fd_sc_hd__xnor2_2   A =  16.27  Df =4685.2-1046.1 ps  S =  96.1 ps  Cin =  8.5 ff  Cout =   2.4 ff  Cmax = 121.8 ff  G =   27  
ABC: Path 16 --    2965 : 3    1 sky130_fd_sc_hd__a21o_2    A =   8.76  Df =4969.2 -846.7 ps  S = 175.0 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 309.5 ff  G = 1422  
ABC: Start-point = pi1035 (\alu.b [0]).  End-point = po31 ($flatten\alu.$procmux$16.Y [31]).
ABC: + print_stats -m 
ABC: netlist                       : i/o = 1138/ 1120  lat =    0  nd =  5123  edge =  13273  area =45843.90  delay =16.00  lev = 16
ABC: + write_blif /tmp/yosys-abc-xS0zFV/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__a41oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__o2bb2ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       52
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       44
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:      141
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       62
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      290
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:      263
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:      259
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:      265
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:      211
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       60
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       94
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       74
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:     1465
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:     1577
ABC RESULTS:        internal signals:     2986
ABC RESULTS:           input signals:     1138
ABC RESULTS:          output signals:     1120
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sys..
Removed 0 unused cells and 5244 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module sys...
Found and reported 0 problems.

63. Printing statistics.

=== sys ===

   Number of wires:               6219
   Number of wire bits:           6294
   Number of public wires:        1096
   Number of public wire bits:    1171
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6243
     sky130_fd_sc_hd__a211o_2       62
     sky130_fd_sc_hd__a21bo_2      259
     sky130_fd_sc_hd__a21boi_2       3
     sky130_fd_sc_hd__a21o_2       141
     sky130_fd_sc_hd__a21oi_2      211
     sky130_fd_sc_hd__a221o_2        4
     sky130_fd_sc_hd__a22o_2        60
     sky130_fd_sc_hd__a31o_2        10
     sky130_fd_sc_hd__a31oi_2        2
     sky130_fd_sc_hd__a32o_2         1
     sky130_fd_sc_hd__a41oi_2        3
     sky130_fd_sc_hd__and2_2        15
     sky130_fd_sc_hd__and2b_2      263
     sky130_fd_sc_hd__and3_2        10
     sky130_fd_sc_hd__and3b_2        6
     sky130_fd_sc_hd__and4_2         1
     sky130_fd_sc_hd__buf_1       1577
     sky130_fd_sc_hd__dfxtp_2     1120
     sky130_fd_sc_hd__inv_2         17
     sky130_fd_sc_hd__mux2_2      1465
     sky130_fd_sc_hd__mux4_2       290
     sky130_fd_sc_hd__nand2_2       74
     sky130_fd_sc_hd__nand2b_2       1
     sky130_fd_sc_hd__nand3_2        6
     sky130_fd_sc_hd__nand3b_2       2
     sky130_fd_sc_hd__nor2_2        94
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__nor4_2         1
     sky130_fd_sc_hd__o211a_2       18
     sky130_fd_sc_hd__o21a_2        27
     sky130_fd_sc_hd__o21ai_2       24
     sky130_fd_sc_hd__o21ba_2        2
     sky130_fd_sc_hd__o21bai_2       2
     sky130_fd_sc_hd__o221a_2      265
     sky130_fd_sc_hd__o22a_2        18
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2a_2       5
     sky130_fd_sc_hd__o2bb2ai_2      1
     sky130_fd_sc_hd__o311a_2        3
     sky130_fd_sc_hd__o31a_2        11
     sky130_fd_sc_hd__o31ai_2        1
     sky130_fd_sc_hd__o32a_2        10
     sky130_fd_sc_hd__o41a_2         4
     sky130_fd_sc_hd__or2_2         44
     sky130_fd_sc_hd__or2b_2         4
     sky130_fd_sc_hd__or3_2         15
     sky130_fd_sc_hd__or3b_2         7
     sky130_fd_sc_hd__or4_2          9
     sky130_fd_sc_hd__or4b_2         2
     sky130_fd_sc_hd__or4bb_2        3
     sky130_fd_sc_hd__xnor2_2       52
     sky130_fd_sc_hd__xor2_2        16

   Chip area for module '\sys': 69671.820800

64. Executing Verilog backend.
Dumping module `\sys'.

65. Executing JSON backend.

End of script. Logfile hash: c1e3778bf9, CPU: user 1.95s system 0.20s, MEM: 48.73 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 79% 2x abc (7 sec), 3% 25x opt_expr (0 sec), ...
